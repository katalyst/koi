//= require ./etc/plupload.js
//= require ./etc/plupload.html4.js
//= require ./etc/plupload.html5.js
//= require ./etc/plupload.flash.js

$ (function () 
{
  function truncate (string) 
	{
    return string.length < 20 ? string : string.substr (0, 20) + "&hellip;"
  }

  var $form             = $ ("#upload-form")
  var $fileList         = $ ('#upload-files')
  var $buttonUpload     = $ ('#upload-button-upload')
  var $tagFieldContents = $ ("#tag-field *")
  var $tagInput         = $tagFieldContents.filter ("input").first ()
  var uploader;

  $tagFieldContents.show ()

  $ ('#upload-form').application (function ()
  {
    uploader = new plupload.Uploader
    ({
      runtimes       : 'html5,flash,html4'
    , url            : jsData.createAssetUrl
    , max_file_size  : '10mb'
    , unique_names   : false
    , browse_button  : 'upload-button-browse'
    , container      : 'upload-form'
    , flash_swf_url  : '/assets/koi/etc/plupload.flash.swf'
    , filters        : [ { title: "Assets", extensions: jsData.acceptedExtensions } ]
    })

    uploader.init ()

    $buttonUpload.closest ('form').submit (function (e)
    {
      uploader.start ()
      e.preventDefault ()
      return false
    });

    uploader.bind ('FilesAdded', function (up, files) 
    {
      $buttonUpload
        .removeClass ('disabled')
        .find ('input')
          .attr ("disabled", null)

      $.each (files, function (i, file) 
     {
        $fileList.append
          ('<div id="' + file.id + '" class="bold space-b-3px">' + truncate (file.name) + ' (' + plupload.formatSize (file.size) + ')' +' <b></b></div>')
      })
      uploader.refresh ()
    })

    uploader.bind ('BeforeUpload', function (up, file) 
    {
      uploader.settings.multipart_params = { tag_list: $('textarea.tagify').tagify('serialize') }
    })

    uploader.bind ('UploadProgress', function (up, file) 
    {
      $ ('#' + file.id + " b").html (file.percent + "%")
    })

    uploader.bind ('Error', function (up, err) 
    {
      $fileList.append
        ("<div>Error: " + err.code + ", Message: " + err.message + (err.file ? ", File: " + err.file.name : "") + "</div>")
      uploader.refresh ()
    })

    uploader.bind ('FileUploaded', function (up, file, response) 
    {
      $ ('#' + file.id + " b").html ("100%")
      if (uploader.total.uploaded == uploader.files.length) 
      {
        $fileList.empty ()
        location.reload ()
      }
    })
  })

  $ ('.insert.asset.application').application (function (insertion)
  {
    insertion.submit (function ()
    {
      var params = $.deparam (insertion.serialize ()).asset
      var width  = params.width
      var url    = params.url

      if (width) url += '?width=' + width

      for (var key in params) if (params.hasOwnProperty (key)) try { params [key] = eval (params [key]) } catch (ex) {}

      var CKEditorFuncNum = location.href.match (/[?&]CKEditorFuncNum=([^&]+)/i) [1]

      window.opener.CKEDITOR.tools.callFunction (CKEditorFuncNum, url)
      window.close ()

      return false
    });

  });

  var myTextArea = $('textarea.tagify').tagify({
    addTagPrompt: "e.g. accounting",
    cssClass: "tagify buttons tagify-container"
  })

  myTextArea.tagify('inputField').autocomplete({
    source: <%= Asset.tag_counts.collect { |t| t.name } %>,
    position: { of: myTextArea.tagify('containerDiv') },
    close: function(event, ui) { myTextArea.tagify('add'); },
  });

  window.myTextArea = myTextArea;

  myTextArea.closest("form").submit( function() {
    myTextArea.tagify('add');
    myTextArea.tagify('serialize');
  });

  $ ('.asset-manager[name=close]').click (function () { window.close (); });

})
