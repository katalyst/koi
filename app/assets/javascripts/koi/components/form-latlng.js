/*jslint browser: true, indent: 2, todo: true, unparam: true */
/*global jQuery,Ornament /*/

(function (document, window, $) {
  "use strict";

  $(document).on("ornament:refresh", function () {
    // References
    // https://developers.google.com/maps/documentation/javascript/examples/places-searchbox
    // https://github.com/kolyunya/yii2-map-input-widget/

    // Find our fields generated by koi
    // _form_field_latlng.html.erb
    var $latLngFields = $("[data-latlng-from]");
    $latLngFields.each(function () {
      var $actualInput = $(this);
      var id = $actualInput.attr("data-latlng-from");

      // Add our button in to the control-group wrapper
      var $button = $(
        '<a href="#" class="button__primary" data-latlng-lightbox-for="' +
          id +
          '">Find Location</a>'
      );
      $actualInput.closest(".controls").append($button);

      // Get all our relevant elements identified by the id
      var $mapContainer = $("[data-latlng-for=" + id + "]");
      var autoComplete = $("[data-latlng-search=" + id + "]")[0];
      var mapCanvas = $mapContainer.find("[data-latlng-map]")[0];
      var $save = $mapContainer.find("[data-latlng-save]");
      var $geolocate = $mapContainer.find("[data-latlng-geolocate]");

      // Some global variables
      var map, marker, searchBox, center;

      // Lightbox functionality
      $button.on("click", function () {
        var popupOptions = $.extend({}, Ornament.popupOptions);
        popupOptions.items = {
          src: "#" + id + "_lightbox",
        };
        if (center) {
          center = getCenterFromInput();
          createPin(center);
        }
        $.magnificPopup.open(popupOptions);
      });

      // Get the latitiude and longitude from the associated input field
      // Or fallback to the default
      var getCenterFromInput = function () {
        if ($actualInput.val()) {
          var splitLatLng = $actualInput.val().split(",");
          return {
            lat: parseFloat(splitLatLng[0]),
            lng: parseFloat(splitLatLng[1]),
          };
        } else {
          return { lat: -34.921619, lng: 138.599257 };
        }
      };

      // Set our initial on-page-load centering
      // either from input value or default
      center = getCenterFromInput();

      // This function will send the position of the marker to the input field
      var sendLatLng = function (position) {
        $actualInput.val(position.lat() + "," + position.lng());
      };

      // Create our google map
      map = new google.maps.Map(mapCanvas, {
        center: center,
        zoom: 13,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        // Hide unneccessary controls
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: false,
        // Hide points of interest
        styles: [
          {
            featureType: "poi",
            elementType: "labels",
            stylers: [{ visibility: "off" }],
          },
        ],
      });

      // Resizing window re-centers map
      google.maps.event.addDomListener(window, "resize", function () {
        var center = map.getCenter();
        google.maps.event.trigger(map, "resize");
        map.setCenter(center);
      });

      // Clearing autosearch
      var clearAutoSearch = function () {
        if (searchBox) {
          searchBox.value = "";
          autoComplete.value = "";
        }
      };

      // Create a pin and place it on the map
      // This will be called once when the map loads to place the original
      // center point, and again after the user has searched
      var createPin = function (location) {
        // Clear out the old markers.
        if (marker) {
          marker.setMap(null);
        }

        // Recenter map to marker
        map.panTo(location);

        marker = new google.maps.Marker({
          map: map,
          position: location,
          draggable: true,
        });

        // Add event listener to dragging the pin
        google.maps.event.addListener(marker, "dragend", function () {
          map.panTo(this.getPosition());

          // Clear search box when dragging the pin
          clearAutoSearch();
        });
      };

      // Create our initial pin (or the pin from the existing value)
      createPin(center);

      // Create the search box and link it to the UI element.
      searchBox = new google.maps.places.Autocomplete(autoComplete);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(autoComplete);

      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener("place_changed", function () {
        var place = searchBox.getPlace();

        if (!place) {
          return;
        }

        // Create the pin for the result and save data to field
        createPin(place.geometry.location);
      });

      $save.on("click", function (e) {
        e.preventDefault();
        if (marker) {
          sendLatLng(marker.getPosition());
          $.magnificPopup.close();
        } else {
          alert("no marker found :(");
        }
      });

      $geolocate.on("click", function (e) {
        if ($geolocate.is("[disabled]")) {
          return false;
        }
        var existingText = $geolocate.text();
        $geolocate
          .addClass("button__icon-left")
          .attr("disabled", true)
          .html(Ornament.icons.spinner + "<span>Geolocating...</span>");
        navigator.geolocation.getCurrentPosition(
          function (position) {
            var position = new google.maps.LatLng(
              position.coords.latitude,
              position.coords.longitude
            );
            createPin(position);
            $geolocate
              .removeClass("button__icon-left")
              .attr("disabled", false)
              .text(existingText);
            clearAutoSearch();
          },
          function (status) {
            alert("Error geolocating. Error message is: " + status.message);
            $geolocate
              .removeClass("button__icon-left")
              .attr("disabled", false)
              .text(existingText);
            console.log(status);
          }
        );
      });

      // Resize the map when the lightbox is opened
      $(document).on("ornament:map_refresh", function () {
        var center = map.getCenter();
        google.maps.event.trigger(map, "resize");
        map.setCenter(center);
      });
    });
  });
})(document, window, jQuery);
