# frozen_string_literal: true

module Admin
  class <%= controller_class_name %>Controller < ApplicationController

    before_action :set_<%= singular_name %>, only: %i[show edit update destroy]

    def index
      <%= plural_name %> = Collection.new(params, default_sort: :<%= search_attribute %>).apply(::<%= class_name %>.strict_loading.all)

      render locals: { <%= plural_name %>: }
    end

    def show
      render locals: { <%= singular_name %>: @<%= singular_name %> }
    end

    def new
      render locals: { <%= singular_name %>: ::<%= class_name %>.new }
    end

    def edit
      render locals: { <%= singular_name %>: @<%= singular_name %> }
    end

    def create
      @<%= singular_name %> = ::<%= class_name %>.new(<%= singular_name %>_params)

      if @<%= singular_name %>.save
        redirect_to [:admin, @<%= singular_name %>]
      else
        render :new, locals: { <%= singular_name %>: @<%= singular_name %> }, status: :unprocessable_entity
      end
    end

    def update
      if @<%= singular_name %>.update(<%= singular_name %>_params)
        redirect_to action: :show
      else
        render :edit, locals: { <%= singular_name %>: @<%= singular_name %> }, status: :unprocessable_entity
      end
    end

    def destroy
      @<%= singular_name %>.destroy

      redirect_to action: :index
    end

    private

    # Only allow a list of trusted parameters through.
    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
        params.fetch(:<%= singular_table_name %>, {})
      <%- else -%>
        params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
      <%- end -%>
    end

    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = ::<%= class_name %>.find(params[:id])
    end

    class Collection
        include ActiveModel::Model
        include ActiveModel::Attributes
        include ActiveSupport::Configurable
        include Pagy::Backend
        include Katalyst::Tables::Backend

        attr_accessor :params, :items, :pagination, :sorting

        attribute :page, :integer
        attribute :search, :string
        attribute :sort, :string

        config_accessor :default_sort, default: "unset"

        def initialize(params = ActionController::Parameters.new, default_sort: config.default_sort)
            super(**params.permit(self.class.attribute_types.keys))

            raise ArgumentError, "Default sort scope is unset" if !default_sort.nil? && !default_sort.is_a?(Symbol)

            @params = params
            @sort = default_sort
        end

        def apply(items)
            @items = items

            with_filters
            with_sort
            with_pagination

            self
        end

        def with_filters
            self.items = items.admin_search(search) if search.present?

            self
        end

        def with_sort
            @sorting, @items = table_sort(@items)

            self
        end

        def with_pagination
            @pagination, @items = pagy(@items)

            self
        end
    end
  end
end
