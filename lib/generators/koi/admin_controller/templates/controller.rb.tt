# frozen_string_literal: true

class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_name %>, only: %i[show edit update destroy]

  attr_reader :collection, :<%= singular_name %>

  def index
    <%- if archivable? -%>
    @collection = Collection.with_params(params).apply(<%= class_name %>.not_archived.strict_loading)
    <%- else -%>
    @collection = Collection.with_params(params).apply(<%= class_name %>.strict_loading)
    <%- end -%>

    render locals: { collection: }
  end

  <%- if archivable? -%>
  def archived
    collection = Collection.with_params(params).apply(<%= class_name %>.archived.strict_loading)

    render locals: { collection: }
  end
  <%- end -%>

  def show
    render locals: { <%= singular_name %>: }
  end

  def new
    @<%= singular_name %> = <%= class_name %>.new

    render locals: { <%= singular_name %>: }
  end

  def edit
    render locals: { <%= singular_name %>: }
  end

  def create
    @<%= singular_name %> = <%= class_name %>.new(<%= singular_table_name %>_params)

    if <%= singular_name %>.save
      redirect_to <%= admin_show_helper %>, status: :see_other
    else
      render :new, locals: { <%= singular_name %>: }, status: :unprocessable_content
    end
  end

  def update
    if <%= singular_name %>.update(<%= singular_table_name %>_params)
      redirect_to <%= admin_show_helper %>, status: :see_other
    else
      render :edit, locals: { <%= singular_name %>: }, status: :unprocessable_content
    end
  end

  <%- if archivable? -%>
  def archive
    <%= class_name %>.where(id: params[:id]).each(&:archive!)

    redirect_back(fallback_location: <%= admin_index_helper %>, status: :see_other)
  end

  def restore
    <%= class_name %>.archived.where(id: params[:id]).each(&:restore!)

    redirect_back(fallback_location: <%= admin_index_helper %>, status: :see_other)
  end
  <%- end -%>

  <%- if orderable? -%>
  def order
    order_params[:<%= table_name %>].each do |id, attrs|
      <%= class_name %>.find(id).update(attrs)
    end

    redirect_back(fallback_location: <%= admin_index_helper %>, status: :see_other)
  end
  <%- end -%>

  def destroy
    <%- if archivable? -%>
    if <%= singular_name %>.archived?
      <%= singular_name %>.destroy!

      redirect_to <%= admin_index_helper %>, status: :see_other
    else
      <%= singular_name %>.archive!

      redirect_back_or_to(<%= admin_show_helper %>, status: :see_other)
    end
    <%- else -%>
    <%= singular_name %>.destroy!

    redirect_to <%= admin_index_helper %>, status: :see_other
    <%- end -%>
  end

  private

  def set_<%= singular_name %>
    <%- if archivable? -%>
    @<%= singular_name %> = <%= class_name %>.with_archived.find(params[:id])
    <%- else -%>
    @<%= singular_name %> = <%= class_name %>.find(params[:id])
    <%- end -%>
  end

  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.expect(<%= singular_table_name %>: [])
    <%- else -%>
    params.expect(<%= singular_table_name %>: [<%= permitted_params %>])
    <%- end -%>
  end

  <%- if orderable? -%>
  def order_params
    params.expect(order: { <%= table_name %>: [[:ordinal]] })
  end
  <%- end -%>

  class Collection < Admin::Collection
    <%- if sortable? %>
    config.sorting  = :<%= default_sort_attribute %>
    <%- end -%>
    <%- if paginate? -%>
    config.paginate = true
    <%- end -%>

    <%- attributes.each do |attribute| -%>
    <% definition = collection_attribute_for(attribute) -%>
    <%- if definition.present? -%>
    <%= definition %>
    <%- end -%>
    <%- end -%>
  end
end
